{"version":3,"sources":["ApolloClient/client.js","GraphQL/Queries.js","Utills/formatters.js","Components/RepositoryList.js","App.js","reportWebVitals.js","index.js"],"names":["httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","setContext","headers","Authorization","client","ApolloClient","cache","InMemoryCache","link","concat","REPOSITORIES","gql","kFormatter","num","Math","abs","sign","toFixed","RepositoryList","useState","repositories","setRepositories","first","cursor","listInnerRef","useRef","useQuery","variables","after","data","error","loading","fetchMore","useEffect","search","edges","className","onScroll","current","scrollTop","scrollHeight","clientHeight","length","updateQuery","prevResult","fetchMoreResult","_repositories","ref","map","repository","key","time","node","src","openGraphImageUrl","alt","name","description","substring","stargazers","totalCount","issues","updatedAt","moment","startOf","fromNow","owner","onError","graphqlErrors","networkError","message","location","path","alert","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e60bb5fc.chunk.js","sourcesContent":["import { ApolloClient, HttpLink, ApolloLink, InMemoryCache, concat } from '@apollo/client';\r\n\r\nconst httpLink = new HttpLink({ uri: 'https://api.github.com/graphql' });\r\n\r\nconst authMiddleware = new ApolloLink((operation, forward) => {\r\n    // add the authorization to the headers\r\n    operation.setContext(({ headers = {} }) => ({\r\n        headers: {\r\n            ...headers,\r\n            Authorization: 'token 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',\r\n        }\r\n    }));\r\n\r\n    return forward(operation);\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: concat(authMiddleware, httpLink),\r\n});\r\n\r\nexport default client;","import { gql } from \"@apollo/client\";\r\n\r\nexport const REPOSITORIES = gql`\r\n  query GetRepos($first: Int!, $after: String) {\r\n      search(query: \"language:JavaScript stars:>10000\", type: REPOSITORY, first: $first, after: $after) {\r\n        repositoryCount\r\n        edges {\r\n          cursor\r\n          node {\r\n            ... on Repository {\r\n              name\r\n              description\r\n              owner {\r\n                ... on Organization {\r\n                  name\r\n                }\r\n              }\r\n              openGraphImageUrl\r\n              stargazers(orderBy: {field: STARRED_AT, direction: DESC}) {\r\n                totalCount\r\n              }\r\n              issues {\r\n                totalCount\r\n              }\r\n              updatedAt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n`;","import moment from 'moment';\r\n\r\nexport const kFormatter = (num) => {\r\n    return Math.abs(num) > 999 ? Math.sign(num)*((Math.abs(num)/1000).toFixed(1)) + 'k' : Math.sign(num)*Math.abs(num);\r\n};\r\n\r\nexport const findTimeInterval = (time) => {\r\n    return moment(time).startOf('hours').fromNow();\r\n};","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { REPOSITORIES } from \"../GraphQL/Queries\";\r\nimport { kFormatter, findTimeInterval } from \"../Utills/formatters\";\r\n\r\nfunction RepositoryList() {\r\n    const [repositories, setRepositories] = useState([]);\r\n    const [first, setFirst] = useState(10);\r\n    const [cursor, setCursor] = useState(null);\r\n    const listInnerRef = useRef();\r\n\r\n    const { error, data, loading, fetchMore } = useQuery(REPOSITORIES, {\r\n        variables: {\r\n            first: first,\r\n            after: cursor\r\n        },\r\n    });\r\n\r\n    const onScroll = () => {\r\n        if (listInnerRef.current) {\r\n            const { scrollTop, scrollHeight, clientHeight } = listInnerRef.current;\r\n\r\n            if (scrollTop + clientHeight === scrollHeight) {\r\n                fetchMore({\r\n                    variables: {\r\n                        after: repositories[repositories.length -1].cursor,\r\n                    },\r\n                    updateQuery: (prevResult, { fetchMoreResult }) => {\r\n                        if (!fetchMoreResult.search.edges)\r\n                            return prevResult;\r\n\r\n                        const _repositories = [...repositories, ...fetchMoreResult.search.edges,];\r\n                        setRepositories(_repositories);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            setRepositories(data.search.edges);\r\n        }\r\n    }, [data]);\r\n\r\n    return(\r\n        <div className=\"repo-list\" onScroll={() => onScroll()} ref={listInnerRef}>\r\n\r\n            {loading && <h1 className=\"loadingText\">Loading</h1>}\r\n\r\n            {repositories.length > 0 && repositories.map((repository, key) => {\r\n                const node = repository.node;\r\n\r\n                return <div className=\"product-list-wrapper\">\r\n                    <div key={key} className=\"repo-card\">\r\n                        <div className=\"image-holder\">\r\n                            <img src={node.openGraphImageUrl} alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"repo-info\">\r\n                            <h1>{node.name}</h1>\r\n                            <p>{`${node.description.substring(0, 100)}`}</p>\r\n                            <div className='issues-stars'>\r\n                                <label>Start: {kFormatter(node.stargazers.totalCount)}</label>\r\n                                <label>Issues: {kFormatter(node.issues.totalCount)}</label>\r\n                                <p>Submitted {findTimeInterval(node.updatedAt)} by {node.owner.name}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepositoryList;","import './App.scss';\nimport client from \"./ApolloClient/client\";\nimport { ApolloProvider } from '@apollo/client';\nimport RepositoryList from './Components/RepositoryList'\n\nimport { onError } from \"@apollo/client/link/error\";\n\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n    graphqlErrors.map(({ message, location, path }) => {\n        alert(`Graphql error ${message}`)\n    });\n});\n\nfunction App() {\n  return (\n      <ApolloProvider client={client}>\n        <div className=\"app\">\n          <RepositoryList />\n        </div>\n      </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}